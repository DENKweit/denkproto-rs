syntax = "proto3";

package inference_graph;

import "modelfile-v2.proto";
import "validate.proto";


option csharp_namespace = "DENK.Proto.InferenceGraph";
option go_package = "github.com/DENKweit/denkproto-go/inference_graph";

message ModelSource {
    oneof source_type {
        option (validate.required) = true;

        modelfile.v2.ModelFile from_proto                 = 1;
        string                 from_network_id            = 2 [(validate.rules).string.uuid = true];
        string                 from_network_experiment_id = 3 [(validate.rules).string.uuid = true];
    }
}

enum ExecutionProvider {
    CPU = 0;
    CUDA = 1;
    DIRECTML = 2;
    TENSORRT = 3;
}

message SessionInfo {
    ExecutionProvider execution_provider = 1 [(validate.rules).enum.defined_only = true];
    int32 device_id = 2 [(validate.rules).int32.gte = 0];
}

message ConstTensorNode {
    message Uint64Array {
        repeated uint64 data = 1;
    }

    message Int64Array {
        repeated sint64 data = 1;
    }

    message Float64Array {
        repeated double data = 1;
    }

    string name   = 1 [(validate.rules).string.min_len = 1];
    repeated uint32 shape  = 2;
    oneof data_type {
        option (validate.required) = true;

        Uint64Array  uint64_data  = 3;
        Int64Array   int64_data   = 4;
        Float64Array float64_data = 5;
    }

    string output_port_name      = 6 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
}

message ImageResizeNode {
    string name                  = 1 [(validate.rules).string.min_len = 1];
    string input_size  = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    string input_image = 3 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    string output_port_name      = 4 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
    optional SessionInfo session_info = 5;
}

message ImagePatchesNode {
    message TargetSizeSource {
        message ImageSize {
            int64 height = 1 [(validate.rules).int64.gte = 1];
            int64 width = 2 [(validate.rules).int64.gte = 1];
        }
        oneof source {
            option (validate.required) = true;
    
            string topic = 1 [(validate.rules).string = {
                min_len: 1,
                pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
            }];
            ImageSize size = 2;
    
        }
    }
    string name                     = 1 [(validate.rules).string.min_len = 1];
    string input_image              = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    string input_bounding_boxes              = 3 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    TargetSizeSource input_target_size = 4 [(validate.rules).message.required = true];
    string output_port_name      = 5 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];

    optional SessionInfo session_info = 7;
}

message VirtualCameraNode {
    string name   = 1 [(validate.rules).string.min_len = 1];
    string path   = 2 [(validate.rules).string.min_len = 1];
    
    string output_port_name      = 3 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
}

message ImageClassificationNode {
    string      name         = 1;
    string      input_image        = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    ModelSource model_source = 3 [(validate.rules).message.required = true];
    string output_port_name      = 4 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
    optional SessionInfo session_info = 5;
}

message ImageObjectDetectionNode {
    string      name         = 1;
    string      input_image        = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    ModelSource model_source = 3 [(validate.rules).message.required = true];

    bool scale_bounding_boxes = 4;
    string output_port_name      = 5 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
    optional SessionInfo session_info = 6;
}

message ImageOcrNode {
    string      name         = 1;
    string      input_image        = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    ModelSource model_source = 3 [(validate.rules).message.required = true];
    string output_port_name      = 4 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];
    optional SessionInfo session_info = 5;
}

message BoundingBoxFilterNode {
    message ThresholdSource {
        oneof source {
            option (validate.required) = true;

            string topic = 1 [(validate.rules).string = {
                min_len: 1,
                pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
            }];
            float value = 2 [(validate.rules).float = {gte: 0, lte: 1}];
        }
    }
    string name                       = 1 [(validate.rules).string.min_len = 1];
    string input_bounding_boxes                = 2 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_]+\\/[a-zA-Z0-9_]+([?]timeout=\\d+)?$"
    }];
    string output_port_name      = 3 [(validate.rules).string = {
        min_len: 1,
        pattern: "^[a-zA-Z0-9_-]+$"
    }];

    optional ThresholdSource input_score_threshold = 4;
    optional ThresholdSource input_iou_threshold        = 5;
    optional SessionInfo session_info = 6;
}

message Node {
    oneof node_type {
        option (validate.required) = true;

        ConstTensorNode          const_tensor_node           =  1;
        ImageResizeNode          image_resize_node           =  2;
        ImagePatchesNode         image_patches_node          =  3;
        VirtualCameraNode        virtual_camera_node         =  4;
        ImageClassificationNode  image_classification_node   =  5;
        ImageObjectDetectionNode image_object_detection_node =  6;
        ImageOcrNode             image_ocr_node              =  7;
        BoundingBoxFilterNode    bounding_box_filter_node    = 8;
    }
}

message Graph {
    repeated Node   nodes      = 1;
             int64  created_at = 2;
             string license_id = 3 [(validate.rules).string.uuid = true];
}