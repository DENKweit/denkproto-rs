// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 26.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `modelfile-v2.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:modelfile.v2.ModelFile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ModelFile {
    // message fields
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.protocol_version)
    pub protocol_version: ::protobuf::MessageField<model_file::Version>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.created_at)
    pub created_at: i64,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.file_info)
    pub file_info: ::protobuf::MessageField<model_file::FileInfo>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.content)
    pub content: ::protobuf::MessageField<model_file::Content>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.class_labels)
    pub class_labels: ::std::vec::Vec<model_file::ClassLabel>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.inputs)
    pub inputs: ::std::vec::Vec<model_file::Input>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.outputs)
    pub outputs: ::std::vec::Vec<model_file::Output>,
    // @@protoc_insertion_point(field:modelfile.v2.ModelFile.int8_calibration_data)
    pub int8_calibration_data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ModelFile {
    fn default() -> &'a ModelFile {
        <ModelFile as ::protobuf::Message>::default_instance()
    }
}

impl ModelFile {
    pub fn new() -> ModelFile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, model_file::Version>(
            "protocol_version",
            |m: &ModelFile| { &m.protocol_version },
            |m: &mut ModelFile| { &mut m.protocol_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_at",
            |m: &ModelFile| { &m.created_at },
            |m: &mut ModelFile| { &mut m.created_at },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, model_file::FileInfo>(
            "file_info",
            |m: &ModelFile| { &m.file_info },
            |m: &mut ModelFile| { &mut m.file_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, model_file::Content>(
            "content",
            |m: &ModelFile| { &m.content },
            |m: &mut ModelFile| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "class_labels",
            |m: &ModelFile| { &m.class_labels },
            |m: &mut ModelFile| { &mut m.class_labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &ModelFile| { &m.inputs },
            |m: &mut ModelFile| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &ModelFile| { &m.outputs },
            |m: &mut ModelFile| { &mut m.outputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "int8_calibration_data",
            |m: &ModelFile| { &m.int8_calibration_data },
            |m: &mut ModelFile| { &mut m.int8_calibration_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ModelFile>(
            "ModelFile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ModelFile {
    const NAME: &'static str = "ModelFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.protocol_version)?;
                },
                16 => {
                    self.created_at = is.read_int64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.file_info)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content)?;
                },
                42 => {
                    self.class_labels.push(is.read_message()?);
                },
                50 => {
                    self.inputs.push(is.read_message()?);
                },
                58 => {
                    self.outputs.push(is.read_message()?);
                },
                66 => {
                    self.int8_calibration_data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.protocol_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.created_at != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.created_at);
        }
        if let Some(v) = self.file_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.class_labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.int8_calibration_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.int8_calibration_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.protocol_version.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.created_at != 0 {
            os.write_int64(2, self.created_at)?;
        }
        if let Some(v) = self.file_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.class_labels {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if !self.int8_calibration_data.is_empty() {
            os.write_bytes(8, &self.int8_calibration_data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ModelFile {
        ModelFile::new()
    }

    fn clear(&mut self) {
        self.protocol_version.clear();
        self.created_at = 0;
        self.file_info.clear();
        self.content.clear();
        self.class_labels.clear();
        self.inputs.clear();
        self.outputs.clear();
        self.int8_calibration_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ModelFile {
        static instance: ModelFile = ModelFile {
            protocol_version: ::protobuf::MessageField::none(),
            created_at: 0,
            file_info: ::protobuf::MessageField::none(),
            content: ::protobuf::MessageField::none(),
            class_labels: ::std::vec::Vec::new(),
            inputs: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            int8_calibration_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ModelFile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ModelFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ModelFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelFile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ModelFile`
pub mod model_file {
    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Version)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Version {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Version.major)
        pub major: u32,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Version.minor)
        pub minor: u32,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Version.patch)
        pub patch: u32,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Version.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Version {
        fn default() -> &'a Version {
            <Version as ::protobuf::Message>::default_instance()
        }
    }

    impl Version {
        pub fn new() -> Version {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "major",
                |m: &Version| { &m.major },
                |m: &mut Version| { &mut m.major },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "minor",
                |m: &Version| { &m.minor },
                |m: &mut Version| { &mut m.minor },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "patch",
                |m: &Version| { &m.patch },
                |m: &mut Version| { &mut m.patch },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Version>(
                "ModelFile.Version",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Version {
        const NAME: &'static str = "Version";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.major = is.read_uint32()?;
                    },
                    16 => {
                        self.minor = is.read_uint32()?;
                    },
                    24 => {
                        self.patch = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.major != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.major);
            }
            if self.minor != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.minor);
            }
            if self.patch != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.patch);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.major != 0 {
                os.write_uint32(1, self.major)?;
            }
            if self.minor != 0 {
                os.write_uint32(2, self.minor)?;
            }
            if self.patch != 0 {
                os.write_uint32(3, self.patch)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Version {
            Version::new()
        }

        fn clear(&mut self) {
            self.major = 0;
            self.minor = 0;
            self.patch = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Version {
            static instance: Version = Version {
                major: 0,
                minor: 0,
                patch: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Version {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.Version").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Version {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Version {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Content)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Content {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.byte_content)
        pub byte_content: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.hash_sha256)
        pub hash_sha256: ::std::vec::Vec<u8>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.compression_method)
        pub compression_method: ::protobuf::EnumOrUnknown<content::CompressionMethod>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.encryption_method)
        pub encryption_method: ::protobuf::EnumOrUnknown<content::EncryptionMethod>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.key_slots)
        pub key_slots: ::std::collections::HashMap<::std::string::String, content::KeySlot>,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Content.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Content {
        fn default() -> &'a Content {
            <Content as ::protobuf::Message>::default_instance()
        }
    }

    impl Content {
        pub fn new() -> Content {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "byte_content",
                |m: &Content| { &m.byte_content },
                |m: &mut Content| { &mut m.byte_content },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "hash_sha256",
                |m: &Content| { &m.hash_sha256 },
                |m: &mut Content| { &mut m.hash_sha256 },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "compression_method",
                |m: &Content| { &m.compression_method },
                |m: &mut Content| { &mut m.compression_method },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "encryption_method",
                |m: &Content| { &m.encryption_method },
                |m: &mut Content| { &mut m.encryption_method },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
                "key_slots",
                |m: &Content| { &m.key_slots },
                |m: &mut Content| { &mut m.key_slots },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Content>(
                "ModelFile.Content",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Content {
        const NAME: &'static str = "Content";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.byte_content = is.read_bytes()?;
                    },
                    18 => {
                        self.hash_sha256 = is.read_bytes()?;
                    },
                    24 => {
                        self.compression_method = is.read_enum_or_unknown()?;
                    },
                    32 => {
                        self.encryption_method = is.read_enum_or_unknown()?;
                    },
                    42 => {
                        let len = is.read_raw_varint32()?;
                        let old_limit = is.push_limit(len as u64)?;
                        let mut key = ::std::default::Default::default();
                        let mut value = ::std::default::Default::default();
                        while let Some(tag) = is.read_raw_tag_or_eof()? {
                            match tag {
                                10 => key = is.read_string()?,
                                18 => value = is.read_message()?,
                                _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                            };
                        }
                        is.pop_limit(old_limit);
                        self.key_slots.insert(key, value);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.byte_content.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.byte_content);
            }
            if !self.hash_sha256.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.hash_sha256);
            }
            if self.compression_method != ::protobuf::EnumOrUnknown::new(content::CompressionMethod::CM_NONE) {
                my_size += ::protobuf::rt::int32_size(3, self.compression_method.value());
            }
            if self.encryption_method != ::protobuf::EnumOrUnknown::new(content::EncryptionMethod::EM_NONE) {
                my_size += ::protobuf::rt::int32_size(4, self.encryption_method.value());
            }
            for (k, v) in &self.key_slots {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                let len = v.compute_size();
                entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.byte_content.is_empty() {
                os.write_bytes(1, &self.byte_content)?;
            }
            if !self.hash_sha256.is_empty() {
                os.write_bytes(2, &self.hash_sha256)?;
            }
            if self.compression_method != ::protobuf::EnumOrUnknown::new(content::CompressionMethod::CM_NONE) {
                os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.compression_method))?;
            }
            if self.encryption_method != ::protobuf::EnumOrUnknown::new(content::EncryptionMethod::EM_NONE) {
                os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.encryption_method))?;
            }
            for (k, v) in &self.key_slots {
                let mut entry_size = 0;
                entry_size += ::protobuf::rt::string_size(1, &k);
                let len = v.cached_size() as u64;
                entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                os.write_raw_varint32(42)?; // Tag.
                os.write_raw_varint32(entry_size as u32)?;
                os.write_string(1, &k)?;
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Content {
            Content::new()
        }

        fn clear(&mut self) {
            self.byte_content.clear();
            self.hash_sha256.clear();
            self.compression_method = ::protobuf::EnumOrUnknown::new(content::CompressionMethod::CM_NONE);
            self.encryption_method = ::protobuf::EnumOrUnknown::new(content::EncryptionMethod::EM_NONE);
            self.key_slots.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Content {
            static instance: ::protobuf::rt::Lazy<Content> = ::protobuf::rt::Lazy::new();
            instance.get(Content::new)
        }
    }

    impl ::protobuf::MessageFull for Content {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.Content").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Content {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Content {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Content`
    pub mod content {
        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Content.KeySlot)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct KeySlot {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.KeySlot.wrapped_key)
            pub wrapped_key: ::std::vec::Vec<u8>,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Content.KeySlot.wrapping_method)
            pub wrapping_method: ::protobuf::EnumOrUnknown<EncryptionMethod>,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Content.KeySlot.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a KeySlot {
            fn default() -> &'a KeySlot {
                <KeySlot as ::protobuf::Message>::default_instance()
            }
        }

        impl KeySlot {
            pub fn new() -> KeySlot {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "wrapped_key",
                    |m: &KeySlot| { &m.wrapped_key },
                    |m: &mut KeySlot| { &mut m.wrapped_key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "wrapping_method",
                    |m: &KeySlot| { &m.wrapping_method },
                    |m: &mut KeySlot| { &mut m.wrapping_method },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeySlot>(
                    "ModelFile.Content.KeySlot",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for KeySlot {
            const NAME: &'static str = "KeySlot";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.wrapped_key = is.read_bytes()?;
                        },
                        16 => {
                            self.wrapping_method = is.read_enum_or_unknown()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.wrapped_key.is_empty() {
                    my_size += ::protobuf::rt::bytes_size(1, &self.wrapped_key);
                }
                if self.wrapping_method != ::protobuf::EnumOrUnknown::new(EncryptionMethod::EM_NONE) {
                    my_size += ::protobuf::rt::int32_size(2, self.wrapping_method.value());
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.wrapped_key.is_empty() {
                    os.write_bytes(1, &self.wrapped_key)?;
                }
                if self.wrapping_method != ::protobuf::EnumOrUnknown::new(EncryptionMethod::EM_NONE) {
                    os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.wrapping_method))?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> KeySlot {
                KeySlot::new()
            }

            fn clear(&mut self) {
                self.wrapped_key.clear();
                self.wrapping_method = ::protobuf::EnumOrUnknown::new(EncryptionMethod::EM_NONE);
                self.special_fields.clear();
            }

            fn default_instance() -> &'static KeySlot {
                static instance: KeySlot = KeySlot {
                    wrapped_key: ::std::vec::Vec::new(),
                    wrapping_method: ::protobuf::EnumOrUnknown::from_i32(0),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for KeySlot {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Content.KeySlot").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for KeySlot {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for KeySlot {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.Content.CompressionMethod)
        pub enum CompressionMethod {
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Content.CompressionMethod.CM_NONE)
            CM_NONE = 0,
        }

        impl ::protobuf::Enum for CompressionMethod {
            const NAME: &'static str = "CompressionMethod";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<CompressionMethod> {
                match value {
                    0 => ::std::option::Option::Some(CompressionMethod::CM_NONE),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<CompressionMethod> {
                match str {
                    "CM_NONE" => ::std::option::Option::Some(CompressionMethod::CM_NONE),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [CompressionMethod] = &[
                CompressionMethod::CM_NONE,
            ];
        }

        impl ::protobuf::EnumFull for CompressionMethod {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ModelFile.Content.CompressionMethod").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for CompressionMethod {
            fn default() -> Self {
                CompressionMethod::CM_NONE
            }
        }

        impl CompressionMethod {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CompressionMethod>("ModelFile.Content.CompressionMethod")
            }
        }

        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.Content.EncryptionMethod)
        pub enum EncryptionMethod {
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Content.EncryptionMethod.EM_NONE)
            EM_NONE = 0,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Content.EncryptionMethod.EM_AES_GCM)
            EM_AES_GCM = 1,
        }

        impl ::protobuf::Enum for EncryptionMethod {
            const NAME: &'static str = "EncryptionMethod";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<EncryptionMethod> {
                match value {
                    0 => ::std::option::Option::Some(EncryptionMethod::EM_NONE),
                    1 => ::std::option::Option::Some(EncryptionMethod::EM_AES_GCM),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<EncryptionMethod> {
                match str {
                    "EM_NONE" => ::std::option::Option::Some(EncryptionMethod::EM_NONE),
                    "EM_AES_GCM" => ::std::option::Option::Some(EncryptionMethod::EM_AES_GCM),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [EncryptionMethod] = &[
                EncryptionMethod::EM_NONE,
                EncryptionMethod::EM_AES_GCM,
            ];
        }

        impl ::protobuf::EnumFull for EncryptionMethod {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ModelFile.Content.EncryptionMethod").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for EncryptionMethod {
            fn default() -> Self {
                EncryptionMethod::EM_NONE
            }
        }

        impl EncryptionMethod {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EncryptionMethod>("ModelFile.Content.EncryptionMethod")
            }
        }
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.ClassLabel)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ClassLabel {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ClassLabel.class_label_id)
        pub class_label_id: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ClassLabel.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ClassLabel.short_name)
        pub short_name: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ClassLabel.color)
        pub color: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.ClassLabel.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ClassLabel {
        fn default() -> &'a ClassLabel {
            <ClassLabel as ::protobuf::Message>::default_instance()
        }
    }

    impl ClassLabel {
        pub fn new() -> ClassLabel {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "class_label_id",
                |m: &ClassLabel| { &m.class_label_id },
                |m: &mut ClassLabel| { &mut m.class_label_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &ClassLabel| { &m.name },
                |m: &mut ClassLabel| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "short_name",
                |m: &ClassLabel| { &m.short_name },
                |m: &mut ClassLabel| { &mut m.short_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "color",
                |m: &ClassLabel| { &m.color },
                |m: &mut ClassLabel| { &mut m.color },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClassLabel>(
                "ModelFile.ClassLabel",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ClassLabel {
        const NAME: &'static str = "ClassLabel";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.class_label_id = is.read_string()?;
                    },
                    18 => {
                        self.name = is.read_string()?;
                    },
                    26 => {
                        self.short_name = is.read_string()?;
                    },
                    34 => {
                        self.color = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.class_label_id.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.class_label_id);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.name);
            }
            if !self.short_name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.short_name);
            }
            if !self.color.is_empty() {
                my_size += ::protobuf::rt::string_size(4, &self.color);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.class_label_id.is_empty() {
                os.write_string(1, &self.class_label_id)?;
            }
            if !self.name.is_empty() {
                os.write_string(2, &self.name)?;
            }
            if !self.short_name.is_empty() {
                os.write_string(3, &self.short_name)?;
            }
            if !self.color.is_empty() {
                os.write_string(4, &self.color)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ClassLabel {
            ClassLabel::new()
        }

        fn clear(&mut self) {
            self.class_label_id.clear();
            self.name.clear();
            self.short_name.clear();
            self.color.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ClassLabel {
            static instance: ClassLabel = ClassLabel {
                class_label_id: ::std::string::String::new(),
                name: ::std::string::String::new(),
                short_name: ::std::string::String::new(),
                color: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ClassLabel {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.ClassLabel").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ClassLabel {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ClassLabel {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.ImageSize)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ImageSize {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ImageSize.width)
        pub width: u32,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ImageSize.height)
        pub height: u32,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.ImageSize.channels)
        pub channels: u32,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.ImageSize.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ImageSize {
        fn default() -> &'a ImageSize {
            <ImageSize as ::protobuf::Message>::default_instance()
        }
    }

    impl ImageSize {
        pub fn new() -> ImageSize {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "width",
                |m: &ImageSize| { &m.width },
                |m: &mut ImageSize| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "height",
                |m: &ImageSize| { &m.height },
                |m: &mut ImageSize| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "channels",
                |m: &ImageSize| { &m.channels },
                |m: &mut ImageSize| { &mut m.channels },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageSize>(
                "ModelFile.ImageSize",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ImageSize {
        const NAME: &'static str = "ImageSize";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.width = is.read_uint32()?;
                    },
                    16 => {
                        self.height = is.read_uint32()?;
                    },
                    24 => {
                        self.channels = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.width != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.width);
            }
            if self.height != 0 {
                my_size += ::protobuf::rt::uint32_size(2, self.height);
            }
            if self.channels != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.channels);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.width != 0 {
                os.write_uint32(1, self.width)?;
            }
            if self.height != 0 {
                os.write_uint32(2, self.height)?;
            }
            if self.channels != 0 {
                os.write_uint32(3, self.channels)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ImageSize {
            ImageSize::new()
        }

        fn clear(&mut self) {
            self.width = 0;
            self.height = 0;
            self.channels = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ImageSize {
            static instance: ImageSize = ImageSize {
                width: 0,
                height: 0,
                channels: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ImageSize {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.ImageSize").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ImageSize {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ImageSize {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.RegionFromEdge)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RegionFromEdge {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.RegionFromEdge.left)
        pub left: f64,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.RegionFromEdge.right)
        pub right: f64,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.RegionFromEdge.top)
        pub top: f64,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.RegionFromEdge.bottom)
        pub bottom: f64,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.RegionFromEdge.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RegionFromEdge {
        fn default() -> &'a RegionFromEdge {
            <RegionFromEdge as ::protobuf::Message>::default_instance()
        }
    }

    impl RegionFromEdge {
        pub fn new() -> RegionFromEdge {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "left",
                |m: &RegionFromEdge| { &m.left },
                |m: &mut RegionFromEdge| { &mut m.left },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "right",
                |m: &RegionFromEdge| { &m.right },
                |m: &mut RegionFromEdge| { &mut m.right },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "top",
                |m: &RegionFromEdge| { &m.top },
                |m: &mut RegionFromEdge| { &mut m.top },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "bottom",
                |m: &RegionFromEdge| { &m.bottom },
                |m: &mut RegionFromEdge| { &mut m.bottom },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegionFromEdge>(
                "ModelFile.RegionFromEdge",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RegionFromEdge {
        const NAME: &'static str = "RegionFromEdge";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.left = is.read_double()?;
                    },
                    17 => {
                        self.right = is.read_double()?;
                    },
                    25 => {
                        self.top = is.read_double()?;
                    },
                    33 => {
                        self.bottom = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.left != 0. {
                my_size += 1 + 8;
            }
            if self.right != 0. {
                my_size += 1 + 8;
            }
            if self.top != 0. {
                my_size += 1 + 8;
            }
            if self.bottom != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.left != 0. {
                os.write_double(1, self.left)?;
            }
            if self.right != 0. {
                os.write_double(2, self.right)?;
            }
            if self.top != 0. {
                os.write_double(3, self.top)?;
            }
            if self.bottom != 0. {
                os.write_double(4, self.bottom)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RegionFromEdge {
            RegionFromEdge::new()
        }

        fn clear(&mut self) {
            self.left = 0.;
            self.right = 0.;
            self.top = 0.;
            self.bottom = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RegionFromEdge {
            static instance: RegionFromEdge = RegionFromEdge {
                left: 0.,
                right: 0.,
                top: 0.,
                bottom: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RegionFromEdge {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.RegionFromEdge").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RegionFromEdge {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RegionFromEdge {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Input)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Input {
        // message oneof groups
        pub FormatInformation: ::std::option::Option<input::FormatInformation>,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Input.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Input {
        fn default() -> &'a Input {
            <Input as ::protobuf::Message>::default_instance()
        }
    }

    impl Input {
        pub fn new() -> Input {
            ::std::default::Default::default()
        }

        // .modelfile.v2.ModelFile.Input.ImageInputFormat image_format = 1;

        pub fn image_format(&self) -> &input::ImageInputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(input::FormatInformation::ImageFormat(ref v)) => v,
                _ => <input::ImageInputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_image_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_image_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(input::FormatInformation::ImageFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_image_format(&mut self, v: input::ImageInputFormat) {
            self.FormatInformation = ::std::option::Option::Some(input::FormatInformation::ImageFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_image_format(&mut self) -> &mut input::ImageInputFormat {
            if let ::std::option::Option::Some(input::FormatInformation::ImageFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(input::FormatInformation::ImageFormat(input::ImageInputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(input::FormatInformation::ImageFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_image_format(&mut self) -> input::ImageInputFormat {
            if self.has_image_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(input::FormatInformation::ImageFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                input::ImageInputFormat::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, input::ImageInputFormat>(
                "image_format",
                Input::has_image_format,
                Input::image_format,
                Input::mut_image_format,
                Input::set_image_format,
            ));
            oneofs.push(input::FormatInformation::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Input>(
                "ModelFile.Input",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Input {
        const NAME: &'static str = "Input";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.FormatInformation = ::std::option::Option::Some(input::FormatInformation::ImageFormat(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.FormatInformation {
                match v {
                    &input::FormatInformation::ImageFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.FormatInformation {
                match v {
                    &input::FormatInformation::ImageFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Input {
            Input::new()
        }

        fn clear(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Input {
            static instance: Input = Input {
                FormatInformation: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Input {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.Input").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Input {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Input {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Input`
    pub mod input {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:modelfile.v2.ModelFile.Input.FormatInformation)
        pub enum FormatInformation {
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Input.image_format)
            ImageFormat(ImageInputFormat),
        }

        impl ::protobuf::Oneof for FormatInformation {
        }

        impl ::protobuf::OneofFull for FormatInformation {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Input as ::protobuf::MessageFull>::descriptor().oneof_by_name("FormatInformation").unwrap()).clone()
            }
        }

        impl FormatInformation {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<FormatInformation>("FormatInformation")
            }
        }
        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Input.ImageInputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct ImageInputFormat {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Input.ImageInputFormat.region_of_interest)
            pub region_of_interest: ::protobuf::MessageField<super::RegionFromEdge>,
            // message oneof groups
            pub image_size_requirements: ::std::option::Option<image_input_format::Image_size_requirements>,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Input.ImageInputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ImageInputFormat {
            fn default() -> &'a ImageInputFormat {
                <ImageInputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl ImageInputFormat {
            pub fn new() -> ImageInputFormat {
                ::std::default::Default::default()
            }

            // .modelfile.v2.ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement exact_image_size = 1;

            pub fn exact_image_size(&self) -> &image_input_format::ExactImageSizeRequirement {
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(ref v)) => v,
                    _ => <image_input_format::ExactImageSizeRequirement as ::protobuf::Message>::default_instance(),
                }
            }

            pub fn clear_exact_image_size(&mut self) {
                self.image_size_requirements = ::std::option::Option::None;
            }

            pub fn has_exact_image_size(&self) -> bool {
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(..)) => true,
                    _ => false,
                }
            }

            // Param is passed by value, moved
            pub fn set_exact_image_size(&mut self, v: image_input_format::ExactImageSizeRequirement) {
                self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(v))
            }

            // Mutable pointer to the field.
            pub fn mut_exact_image_size(&mut self) -> &mut image_input_format::ExactImageSizeRequirement {
                if let ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(_)) = self.image_size_requirements {
                } else {
                    self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(image_input_format::ExactImageSizeRequirement::new()));
                }
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(ref mut v)) => v,
                    _ => panic!(),
                }
            }

            // Take field
            pub fn take_exact_image_size(&mut self) -> image_input_format::ExactImageSizeRequirement {
                if self.has_exact_image_size() {
                    match self.image_size_requirements.take() {
                        ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(v)) => v,
                        _ => panic!(),
                    }
                } else {
                    image_input_format::ExactImageSizeRequirement::new()
                }
            }

            // .modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement divisible_image_size = 2;

            pub fn divisible_image_size(&self) -> &image_input_format::DivisibleImageSizeRequirement {
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(ref v)) => v,
                    _ => <image_input_format::DivisibleImageSizeRequirement as ::protobuf::Message>::default_instance(),
                }
            }

            pub fn clear_divisible_image_size(&mut self) {
                self.image_size_requirements = ::std::option::Option::None;
            }

            pub fn has_divisible_image_size(&self) -> bool {
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(..)) => true,
                    _ => false,
                }
            }

            // Param is passed by value, moved
            pub fn set_divisible_image_size(&mut self, v: image_input_format::DivisibleImageSizeRequirement) {
                self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(v))
            }

            // Mutable pointer to the field.
            pub fn mut_divisible_image_size(&mut self) -> &mut image_input_format::DivisibleImageSizeRequirement {
                if let ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(_)) = self.image_size_requirements {
                } else {
                    self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(image_input_format::DivisibleImageSizeRequirement::new()));
                }
                match self.image_size_requirements {
                    ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(ref mut v)) => v,
                    _ => panic!(),
                }
            }

            // Take field
            pub fn take_divisible_image_size(&mut self) -> image_input_format::DivisibleImageSizeRequirement {
                if self.has_divisible_image_size() {
                    match self.image_size_requirements.take() {
                        ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(v)) => v,
                        _ => panic!(),
                    }
                } else {
                    image_input_format::DivisibleImageSizeRequirement::new()
                }
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(1);
                fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, image_input_format::ExactImageSizeRequirement>(
                    "exact_image_size",
                    ImageInputFormat::has_exact_image_size,
                    ImageInputFormat::exact_image_size,
                    ImageInputFormat::mut_exact_image_size,
                    ImageInputFormat::set_exact_image_size,
                ));
                fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, image_input_format::DivisibleImageSizeRequirement>(
                    "divisible_image_size",
                    ImageInputFormat::has_divisible_image_size,
                    ImageInputFormat::divisible_image_size,
                    ImageInputFormat::mut_divisible_image_size,
                    ImageInputFormat::set_divisible_image_size,
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RegionFromEdge>(
                    "region_of_interest",
                    |m: &ImageInputFormat| { &m.region_of_interest },
                    |m: &mut ImageInputFormat| { &mut m.region_of_interest },
                ));
                oneofs.push(image_input_format::Image_size_requirements::generated_oneof_descriptor_data());
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageInputFormat>(
                    "ModelFile.Input.ImageInputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ImageInputFormat {
            const NAME: &'static str = "ImageInputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::ExactImageSize(is.read_message()?));
                        },
                        18 => {
                            self.image_size_requirements = ::std::option::Option::Some(image_input_format::Image_size_requirements::DivisibleImageSize(is.read_message()?));
                        },
                        26 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.region_of_interest)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.region_of_interest.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let ::std::option::Option::Some(ref v) = self.image_size_requirements {
                    match v {
                        &image_input_format::Image_size_requirements::ExactImageSize(ref v) => {
                            let len = v.compute_size();
                            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                        },
                        &image_input_format::Image_size_requirements::DivisibleImageSize(ref v) => {
                            let len = v.compute_size();
                            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                        },
                    };
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.region_of_interest.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                }
                if let ::std::option::Option::Some(ref v) = self.image_size_requirements {
                    match v {
                        &image_input_format::Image_size_requirements::ExactImageSize(ref v) => {
                            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                        },
                        &image_input_format::Image_size_requirements::DivisibleImageSize(ref v) => {
                            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                        },
                    };
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ImageInputFormat {
                ImageInputFormat::new()
            }

            fn clear(&mut self) {
                self.image_size_requirements = ::std::option::Option::None;
                self.image_size_requirements = ::std::option::Option::None;
                self.region_of_interest.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ImageInputFormat {
                static instance: ImageInputFormat = ImageInputFormat {
                    region_of_interest: ::protobuf::MessageField::none(),
                    image_size_requirements: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ImageInputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Input.ImageInputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ImageInputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ImageInputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `ImageInputFormat`
        pub mod image_input_format {

            #[derive(Clone,PartialEq,Debug)]
            #[non_exhaustive]
            // @@protoc_insertion_point(oneof:modelfile.v2.ModelFile.Input.ImageInputFormat.image_size_requirements)
            pub enum Image_size_requirements {
                // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Input.ImageInputFormat.exact_image_size)
                ExactImageSize(ExactImageSizeRequirement),
                // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Input.ImageInputFormat.divisible_image_size)
                DivisibleImageSize(DivisibleImageSizeRequirement),
            }

            impl ::protobuf::Oneof for Image_size_requirements {
            }

            impl ::protobuf::OneofFull for Image_size_requirements {
                fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| <super::ImageInputFormat as ::protobuf::MessageFull>::descriptor().oneof_by_name("image_size_requirements").unwrap()).clone()
                }
            }

            impl Image_size_requirements {
                pub(in super::super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                    ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Image_size_requirements>("image_size_requirements")
                }
            }
            // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement)
            #[derive(PartialEq,Clone,Default,Debug)]
            pub struct ExactImageSizeRequirement {
                // message fields
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement.image_size)
                pub image_size: ::protobuf::MessageField<super::super::ImageSize>,
                // special fields
                // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a ExactImageSizeRequirement {
                fn default() -> &'a ExactImageSizeRequirement {
                    <ExactImageSizeRequirement as ::protobuf::Message>::default_instance()
                }
            }

            impl ExactImageSizeRequirement {
                pub fn new() -> ExactImageSizeRequirement {
                    ::std::default::Default::default()
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(1);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ImageSize>(
                        "image_size",
                        |m: &ExactImageSizeRequirement| { &m.image_size },
                        |m: &mut ExactImageSizeRequirement| { &mut m.image_size },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExactImageSizeRequirement>(
                        "ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for ExactImageSizeRequirement {
                const NAME: &'static str = "ExactImageSizeRequirement";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_size)?;
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.image_size.as_ref() {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.image_size.as_ref() {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> ExactImageSizeRequirement {
                    ExactImageSizeRequirement::new()
                }

                fn clear(&mut self) {
                    self.image_size.clear();
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static ExactImageSizeRequirement {
                    static instance: ExactImageSizeRequirement = ExactImageSizeRequirement {
                        image_size: ::protobuf::MessageField::none(),
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for ExactImageSizeRequirement {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("ModelFile.Input.ImageInputFormat.ExactImageSizeRequirement").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for ExactImageSizeRequirement {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for ExactImageSizeRequirement {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }

            // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement)
            #[derive(PartialEq,Clone,Default,Debug)]
            pub struct DivisibleImageSizeRequirement {
                // message fields
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement.image_size_divisors)
                pub image_size_divisors: ::protobuf::MessageField<super::super::ImageSize>,
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement.minimum_image_size)
                pub minimum_image_size: ::protobuf::MessageField<super::super::ImageSize>,
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement.suggested_image_size)
                pub suggested_image_size: ::protobuf::MessageField<super::super::ImageSize>,
                // special fields
                // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a DivisibleImageSizeRequirement {
                fn default() -> &'a DivisibleImageSizeRequirement {
                    <DivisibleImageSizeRequirement as ::protobuf::Message>::default_instance()
                }
            }

            impl DivisibleImageSizeRequirement {
                pub fn new() -> DivisibleImageSizeRequirement {
                    ::std::default::Default::default()
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(3);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ImageSize>(
                        "image_size_divisors",
                        |m: &DivisibleImageSizeRequirement| { &m.image_size_divisors },
                        |m: &mut DivisibleImageSizeRequirement| { &mut m.image_size_divisors },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ImageSize>(
                        "minimum_image_size",
                        |m: &DivisibleImageSizeRequirement| { &m.minimum_image_size },
                        |m: &mut DivisibleImageSizeRequirement| { &mut m.minimum_image_size },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::ImageSize>(
                        "suggested_image_size",
                        |m: &DivisibleImageSizeRequirement| { &m.suggested_image_size },
                        |m: &mut DivisibleImageSizeRequirement| { &mut m.suggested_image_size },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DivisibleImageSizeRequirement>(
                        "ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for DivisibleImageSizeRequirement {
                const NAME: &'static str = "DivisibleImageSizeRequirement";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_size_divisors)?;
                            },
                            18 => {
                                ::protobuf::rt::read_singular_message_into_field(is, &mut self.minimum_image_size)?;
                            },
                            26 => {
                                ::protobuf::rt::read_singular_message_into_field(is, &mut self.suggested_image_size)?;
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.image_size_divisors.as_ref() {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    }
                    if let Some(v) = self.minimum_image_size.as_ref() {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    }
                    if let Some(v) = self.suggested_image_size.as_ref() {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.image_size_divisors.as_ref() {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    }
                    if let Some(v) = self.minimum_image_size.as_ref() {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    }
                    if let Some(v) = self.suggested_image_size.as_ref() {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> DivisibleImageSizeRequirement {
                    DivisibleImageSizeRequirement::new()
                }

                fn clear(&mut self) {
                    self.image_size_divisors.clear();
                    self.minimum_image_size.clear();
                    self.suggested_image_size.clear();
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static DivisibleImageSizeRequirement {
                    static instance: DivisibleImageSizeRequirement = DivisibleImageSizeRequirement {
                        image_size_divisors: ::protobuf::MessageField::none(),
                        minimum_image_size: ::protobuf::MessageField::none(),
                        suggested_image_size: ::protobuf::MessageField::none(),
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for DivisibleImageSizeRequirement {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("ModelFile.Input.ImageInputFormat.DivisibleImageSizeRequirement").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for DivisibleImageSizeRequirement {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for DivisibleImageSizeRequirement {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Output {
        // message oneof groups
        pub FormatInformation: ::std::option::Option<output::FormatInformation>,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Output {
        fn default() -> &'a Output {
            <Output as ::protobuf::Message>::default_instance()
        }
    }

    impl Output {
        pub fn new() -> Output {
            ::std::default::Default::default()
        }

        // .modelfile.v2.ModelFile.Output.ImageClassifiersOutputFormat image_classifiers_format = 1;

        pub fn image_classifiers_format(&self) -> &output::ImageClassifiersOutputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(ref v)) => v,
                _ => <output::ImageClassifiersOutputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_image_classifiers_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_image_classifiers_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_image_classifiers_format(&mut self, v: output::ImageClassifiersOutputFormat) {
            self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_image_classifiers_format(&mut self) -> &mut output::ImageClassifiersOutputFormat {
            if let ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(output::ImageClassifiersOutputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_image_classifiers_format(&mut self) -> output::ImageClassifiersOutputFormat {
            if self.has_image_classifiers_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                output::ImageClassifiersOutputFormat::new()
            }
        }

        // .modelfile.v2.ModelFile.Output.SegmentationMapsOutputFormat segmentation_maps_format = 2;

        pub fn segmentation_maps_format(&self) -> &output::SegmentationMapsOutputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(ref v)) => v,
                _ => <output::SegmentationMapsOutputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_segmentation_maps_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_segmentation_maps_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_segmentation_maps_format(&mut self, v: output::SegmentationMapsOutputFormat) {
            self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_segmentation_maps_format(&mut self) -> &mut output::SegmentationMapsOutputFormat {
            if let ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(output::SegmentationMapsOutputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_segmentation_maps_format(&mut self) -> output::SegmentationMapsOutputFormat {
            if self.has_segmentation_maps_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                output::SegmentationMapsOutputFormat::new()
            }
        }

        // .modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat bounding_boxes_format = 3;

        pub fn bounding_boxes_format(&self) -> &output::BoundingBoxesOutputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(ref v)) => v,
                _ => <output::BoundingBoxesOutputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_bounding_boxes_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_bounding_boxes_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_bounding_boxes_format(&mut self, v: output::BoundingBoxesOutputFormat) {
            self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_bounding_boxes_format(&mut self) -> &mut output::BoundingBoxesOutputFormat {
            if let ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(output::BoundingBoxesOutputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_bounding_boxes_format(&mut self) -> output::BoundingBoxesOutputFormat {
            if self.has_bounding_boxes_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                output::BoundingBoxesOutputFormat::new()
            }
        }

        // .modelfile.v2.ModelFile.Output.BoundingBoxSegmentationsOutputFormat bounding_box_segmentations_format = 4;

        pub fn bounding_box_segmentations_format(&self) -> &output::BoundingBoxSegmentationsOutputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(ref v)) => v,
                _ => <output::BoundingBoxSegmentationsOutputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_bounding_box_segmentations_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_bounding_box_segmentations_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_bounding_box_segmentations_format(&mut self, v: output::BoundingBoxSegmentationsOutputFormat) {
            self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_bounding_box_segmentations_format(&mut self) -> &mut output::BoundingBoxSegmentationsOutputFormat {
            if let ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(output::BoundingBoxSegmentationsOutputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_bounding_box_segmentations_format(&mut self) -> output::BoundingBoxSegmentationsOutputFormat {
            if self.has_bounding_box_segmentations_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                output::BoundingBoxSegmentationsOutputFormat::new()
            }
        }

        // .modelfile.v2.ModelFile.Output.OcrOutputFormat ocr_format = 5;

        pub fn ocr_format(&self) -> &output::OcrOutputFormat {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::OcrFormat(ref v)) => v,
                _ => <output::OcrOutputFormat as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_ocr_format(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
        }

        pub fn has_ocr_format(&self) -> bool {
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::OcrFormat(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_ocr_format(&mut self, v: output::OcrOutputFormat) {
            self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::OcrFormat(v))
        }

        // Mutable pointer to the field.
        pub fn mut_ocr_format(&mut self) -> &mut output::OcrOutputFormat {
            if let ::std::option::Option::Some(output::FormatInformation::OcrFormat(_)) = self.FormatInformation {
            } else {
                self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::OcrFormat(output::OcrOutputFormat::new()));
            }
            match self.FormatInformation {
                ::std::option::Option::Some(output::FormatInformation::OcrFormat(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_ocr_format(&mut self) -> output::OcrOutputFormat {
            if self.has_ocr_format() {
                match self.FormatInformation.take() {
                    ::std::option::Option::Some(output::FormatInformation::OcrFormat(v)) => v,
                    _ => panic!(),
                }
            } else {
                output::OcrOutputFormat::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, output::ImageClassifiersOutputFormat>(
                "image_classifiers_format",
                Output::has_image_classifiers_format,
                Output::image_classifiers_format,
                Output::mut_image_classifiers_format,
                Output::set_image_classifiers_format,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, output::SegmentationMapsOutputFormat>(
                "segmentation_maps_format",
                Output::has_segmentation_maps_format,
                Output::segmentation_maps_format,
                Output::mut_segmentation_maps_format,
                Output::set_segmentation_maps_format,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, output::BoundingBoxesOutputFormat>(
                "bounding_boxes_format",
                Output::has_bounding_boxes_format,
                Output::bounding_boxes_format,
                Output::mut_bounding_boxes_format,
                Output::set_bounding_boxes_format,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, output::BoundingBoxSegmentationsOutputFormat>(
                "bounding_box_segmentations_format",
                Output::has_bounding_box_segmentations_format,
                Output::bounding_box_segmentations_format,
                Output::mut_bounding_box_segmentations_format,
                Output::set_bounding_box_segmentations_format,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, output::OcrOutputFormat>(
                "ocr_format",
                Output::has_ocr_format,
                Output::ocr_format,
                Output::mut_ocr_format,
                Output::set_ocr_format,
            ));
            oneofs.push(output::FormatInformation::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Output>(
                "ModelFile.Output",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Output {
        const NAME: &'static str = "Output";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::ImageClassifiersFormat(is.read_message()?));
                    },
                    18 => {
                        self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::SegmentationMapsFormat(is.read_message()?));
                    },
                    26 => {
                        self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxesFormat(is.read_message()?));
                    },
                    34 => {
                        self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::BoundingBoxSegmentationsFormat(is.read_message()?));
                    },
                    42 => {
                        self.FormatInformation = ::std::option::Option::Some(output::FormatInformation::OcrFormat(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.FormatInformation {
                match v {
                    &output::FormatInformation::ImageClassifiersFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &output::FormatInformation::SegmentationMapsFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &output::FormatInformation::BoundingBoxesFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &output::FormatInformation::BoundingBoxSegmentationsFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &output::FormatInformation::OcrFormat(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.FormatInformation {
                match v {
                    &output::FormatInformation::ImageClassifiersFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &output::FormatInformation::SegmentationMapsFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &output::FormatInformation::BoundingBoxesFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &output::FormatInformation::BoundingBoxSegmentationsFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                    },
                    &output::FormatInformation::OcrFormat(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Output {
            Output::new()
        }

        fn clear(&mut self) {
            self.FormatInformation = ::std::option::Option::None;
            self.FormatInformation = ::std::option::Option::None;
            self.FormatInformation = ::std::option::Option::None;
            self.FormatInformation = ::std::option::Option::None;
            self.FormatInformation = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Output {
            static instance: Output = Output {
                FormatInformation: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Output {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.Output").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Output {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Output {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Output`
    pub mod output {

        #[derive(Clone,PartialEq,Debug)]
        #[non_exhaustive]
        // @@protoc_insertion_point(oneof:modelfile.v2.ModelFile.Output.FormatInformation)
        pub enum FormatInformation {
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Output.image_classifiers_format)
            ImageClassifiersFormat(ImageClassifiersOutputFormat),
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Output.segmentation_maps_format)
            SegmentationMapsFormat(SegmentationMapsOutputFormat),
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Output.bounding_boxes_format)
            BoundingBoxesFormat(BoundingBoxesOutputFormat),
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Output.bounding_box_segmentations_format)
            BoundingBoxSegmentationsFormat(BoundingBoxSegmentationsOutputFormat),
            // @@protoc_insertion_point(oneof_field:modelfile.v2.ModelFile.Output.ocr_format)
            OcrFormat(OcrOutputFormat),
        }

        impl ::protobuf::Oneof for FormatInformation {
        }

        impl ::protobuf::OneofFull for FormatInformation {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::Output as ::protobuf::MessageFull>::descriptor().oneof_by_name("FormatInformation").unwrap()).clone()
            }
        }

        impl FormatInformation {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<FormatInformation>("FormatInformation")
            }
        }
        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.ImageClassifiersOutputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct ImageClassifiersOutputFormat {
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.ImageClassifiersOutputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ImageClassifiersOutputFormat {
            fn default() -> &'a ImageClassifiersOutputFormat {
                <ImageClassifiersOutputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl ImageClassifiersOutputFormat {
            pub fn new() -> ImageClassifiersOutputFormat {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageClassifiersOutputFormat>(
                    "ModelFile.Output.ImageClassifiersOutputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ImageClassifiersOutputFormat {
            const NAME: &'static str = "ImageClassifiersOutputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ImageClassifiersOutputFormat {
                ImageClassifiersOutputFormat::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ImageClassifiersOutputFormat {
                static instance: ImageClassifiersOutputFormat = ImageClassifiersOutputFormat {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ImageClassifiersOutputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.ImageClassifiersOutputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ImageClassifiersOutputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ImageClassifiersOutputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.SegmentationMapsOutputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct SegmentationMapsOutputFormat {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.SegmentationMapsOutputFormat.image_size)
            pub image_size: ::protobuf::MessageField<super::ImageSize>,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.SegmentationMapsOutputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a SegmentationMapsOutputFormat {
            fn default() -> &'a SegmentationMapsOutputFormat {
                <SegmentationMapsOutputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl SegmentationMapsOutputFormat {
            pub fn new() -> SegmentationMapsOutputFormat {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ImageSize>(
                    "image_size",
                    |m: &SegmentationMapsOutputFormat| { &m.image_size },
                    |m: &mut SegmentationMapsOutputFormat| { &mut m.image_size },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SegmentationMapsOutputFormat>(
                    "ModelFile.Output.SegmentationMapsOutputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for SegmentationMapsOutputFormat {
            const NAME: &'static str = "SegmentationMapsOutputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_size)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.image_size.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.image_size.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> SegmentationMapsOutputFormat {
                SegmentationMapsOutputFormat::new()
            }

            fn clear(&mut self) {
                self.image_size.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static SegmentationMapsOutputFormat {
                static instance: SegmentationMapsOutputFormat = SegmentationMapsOutputFormat {
                    image_size: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for SegmentationMapsOutputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.SegmentationMapsOutputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for SegmentationMapsOutputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for SegmentationMapsOutputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct BoundingBoxesOutputFormat {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.number_of_boxes)
            pub number_of_boxes: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.stride)
            pub stride: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.x1_offset)
            pub x1_offset: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.y1_offset)
            pub y1_offset: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.x2_offset)
            pub x2_offset: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.y2_offset)
            pub y2_offset: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.confidence_offset)
            pub confidence_offset: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.class_label_index_offset)
            pub class_label_index_offset: u64,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.BoundingBoxesOutputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a BoundingBoxesOutputFormat {
            fn default() -> &'a BoundingBoxesOutputFormat {
                <BoundingBoxesOutputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl BoundingBoxesOutputFormat {
            pub fn new() -> BoundingBoxesOutputFormat {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(8);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "number_of_boxes",
                    |m: &BoundingBoxesOutputFormat| { &m.number_of_boxes },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.number_of_boxes },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "stride",
                    |m: &BoundingBoxesOutputFormat| { &m.stride },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.stride },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "x1_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.x1_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.x1_offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "y1_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.y1_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.y1_offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "x2_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.x2_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.x2_offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "y2_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.y2_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.y2_offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "confidence_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.confidence_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.confidence_offset },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "class_label_index_offset",
                    |m: &BoundingBoxesOutputFormat| { &m.class_label_index_offset },
                    |m: &mut BoundingBoxesOutputFormat| { &mut m.class_label_index_offset },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BoundingBoxesOutputFormat>(
                    "ModelFile.Output.BoundingBoxesOutputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for BoundingBoxesOutputFormat {
            const NAME: &'static str = "BoundingBoxesOutputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.number_of_boxes = is.read_uint64()?;
                        },
                        16 => {
                            self.stride = is.read_uint64()?;
                        },
                        24 => {
                            self.x1_offset = is.read_uint64()?;
                        },
                        32 => {
                            self.y1_offset = is.read_uint64()?;
                        },
                        40 => {
                            self.x2_offset = is.read_uint64()?;
                        },
                        48 => {
                            self.y2_offset = is.read_uint64()?;
                        },
                        56 => {
                            self.confidence_offset = is.read_uint64()?;
                        },
                        64 => {
                            self.class_label_index_offset = is.read_uint64()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.number_of_boxes != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.number_of_boxes);
                }
                if self.stride != 0 {
                    my_size += ::protobuf::rt::uint64_size(2, self.stride);
                }
                if self.x1_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(3, self.x1_offset);
                }
                if self.y1_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(4, self.y1_offset);
                }
                if self.x2_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(5, self.x2_offset);
                }
                if self.y2_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(6, self.y2_offset);
                }
                if self.confidence_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(7, self.confidence_offset);
                }
                if self.class_label_index_offset != 0 {
                    my_size += ::protobuf::rt::uint64_size(8, self.class_label_index_offset);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.number_of_boxes != 0 {
                    os.write_uint64(1, self.number_of_boxes)?;
                }
                if self.stride != 0 {
                    os.write_uint64(2, self.stride)?;
                }
                if self.x1_offset != 0 {
                    os.write_uint64(3, self.x1_offset)?;
                }
                if self.y1_offset != 0 {
                    os.write_uint64(4, self.y1_offset)?;
                }
                if self.x2_offset != 0 {
                    os.write_uint64(5, self.x2_offset)?;
                }
                if self.y2_offset != 0 {
                    os.write_uint64(6, self.y2_offset)?;
                }
                if self.confidence_offset != 0 {
                    os.write_uint64(7, self.confidence_offset)?;
                }
                if self.class_label_index_offset != 0 {
                    os.write_uint64(8, self.class_label_index_offset)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> BoundingBoxesOutputFormat {
                BoundingBoxesOutputFormat::new()
            }

            fn clear(&mut self) {
                self.number_of_boxes = 0;
                self.stride = 0;
                self.x1_offset = 0;
                self.y1_offset = 0;
                self.x2_offset = 0;
                self.y2_offset = 0;
                self.confidence_offset = 0;
                self.class_label_index_offset = 0;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static BoundingBoxesOutputFormat {
                static instance: BoundingBoxesOutputFormat = BoundingBoxesOutputFormat {
                    number_of_boxes: 0,
                    stride: 0,
                    x1_offset: 0,
                    y1_offset: 0,
                    x2_offset: 0,
                    y2_offset: 0,
                    confidence_offset: 0,
                    class_label_index_offset: 0,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for BoundingBoxesOutputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.BoundingBoxesOutputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for BoundingBoxesOutputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for BoundingBoxesOutputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.BoundingBoxSegmentationsOutputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct BoundingBoxSegmentationsOutputFormat {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxSegmentationsOutputFormat.image_size)
            pub image_size: ::protobuf::MessageField<super::ImageSize>,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.BoundingBoxSegmentationsOutputFormat.relative_to_bounding_box)
            pub relative_to_bounding_box: bool,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.BoundingBoxSegmentationsOutputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a BoundingBoxSegmentationsOutputFormat {
            fn default() -> &'a BoundingBoxSegmentationsOutputFormat {
                <BoundingBoxSegmentationsOutputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl BoundingBoxSegmentationsOutputFormat {
            pub fn new() -> BoundingBoxSegmentationsOutputFormat {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ImageSize>(
                    "image_size",
                    |m: &BoundingBoxSegmentationsOutputFormat| { &m.image_size },
                    |m: &mut BoundingBoxSegmentationsOutputFormat| { &mut m.image_size },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "relative_to_bounding_box",
                    |m: &BoundingBoxSegmentationsOutputFormat| { &m.relative_to_bounding_box },
                    |m: &mut BoundingBoxSegmentationsOutputFormat| { &mut m.relative_to_bounding_box },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BoundingBoxSegmentationsOutputFormat>(
                    "ModelFile.Output.BoundingBoxSegmentationsOutputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for BoundingBoxSegmentationsOutputFormat {
            const NAME: &'static str = "BoundingBoxSegmentationsOutputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.image_size)?;
                        },
                        16 => {
                            self.relative_to_bounding_box = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.image_size.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if self.relative_to_bounding_box != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.image_size.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                if self.relative_to_bounding_box != false {
                    os.write_bool(2, self.relative_to_bounding_box)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> BoundingBoxSegmentationsOutputFormat {
                BoundingBoxSegmentationsOutputFormat::new()
            }

            fn clear(&mut self) {
                self.image_size.clear();
                self.relative_to_bounding_box = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static BoundingBoxSegmentationsOutputFormat {
                static instance: BoundingBoxSegmentationsOutputFormat = BoundingBoxSegmentationsOutputFormat {
                    image_size: ::protobuf::MessageField::none(),
                    relative_to_bounding_box: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for BoundingBoxSegmentationsOutputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.BoundingBoxSegmentationsOutputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for BoundingBoxSegmentationsOutputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for BoundingBoxSegmentationsOutputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.OcrOutputFormat)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct OcrOutputFormat {
            // message fields
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.OcrOutputFormat.number_of_characters)
            pub number_of_characters: u64,
            // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.OcrOutputFormat.characters)
            pub characters: ::std::vec::Vec<ocr_output_format::Character>,
            // special fields
            // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.OcrOutputFormat.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a OcrOutputFormat {
            fn default() -> &'a OcrOutputFormat {
                <OcrOutputFormat as ::protobuf::Message>::default_instance()
            }
        }

        impl OcrOutputFormat {
            pub fn new() -> OcrOutputFormat {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "number_of_characters",
                    |m: &OcrOutputFormat| { &m.number_of_characters },
                    |m: &mut OcrOutputFormat| { &mut m.number_of_characters },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "characters",
                    |m: &OcrOutputFormat| { &m.characters },
                    |m: &mut OcrOutputFormat| { &mut m.characters },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OcrOutputFormat>(
                    "ModelFile.Output.OcrOutputFormat",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for OcrOutputFormat {
            const NAME: &'static str = "OcrOutputFormat";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.number_of_characters = is.read_uint64()?;
                        },
                        18 => {
                            self.characters.push(is.read_message()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.number_of_characters != 0 {
                    my_size += ::protobuf::rt::uint64_size(1, self.number_of_characters);
                }
                for value in &self.characters {
                    let len = value.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                };
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.number_of_characters != 0 {
                    os.write_uint64(1, self.number_of_characters)?;
                }
                for v in &self.characters {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                };
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> OcrOutputFormat {
                OcrOutputFormat::new()
            }

            fn clear(&mut self) {
                self.number_of_characters = 0;
                self.characters.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static OcrOutputFormat {
                static instance: OcrOutputFormat = OcrOutputFormat {
                    number_of_characters: 0,
                    characters: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for OcrOutputFormat {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.OcrOutputFormat").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for OcrOutputFormat {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for OcrOutputFormat {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `OcrOutputFormat`
        pub mod ocr_output_format {
            // @@protoc_insertion_point(message:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character)
            #[derive(PartialEq,Clone,Default,Debug)]
            pub struct Character {
                // message fields
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.utf8_representation)
                pub utf8_representation: ::std::vec::Vec<u8>,
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.character_type)
                pub character_type: ::protobuf::EnumOrUnknown<character::CharacterType>,
                // @@protoc_insertion_point(field:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.ignore)
                pub ignore: bool,
                // special fields
                // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a Character {
                fn default() -> &'a Character {
                    <Character as ::protobuf::Message>::default_instance()
                }
            }

            impl Character {
                pub fn new() -> Character {
                    ::std::default::Default::default()
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(3);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                        "utf8_representation",
                        |m: &Character| { &m.utf8_representation },
                        |m: &mut Character| { &mut m.utf8_representation },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                        "character_type",
                        |m: &Character| { &m.character_type },
                        |m: &mut Character| { &mut m.character_type },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                        "ignore",
                        |m: &Character| { &m.ignore },
                        |m: &mut Character| { &mut m.ignore },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Character>(
                        "ModelFile.Output.OcrOutputFormat.Character",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for Character {
                const NAME: &'static str = "Character";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                self.utf8_representation = is.read_bytes()?;
                            },
                            16 => {
                                self.character_type = is.read_enum_or_unknown()?;
                            },
                            24 => {
                                self.ignore = is.read_bool()?;
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if !self.utf8_representation.is_empty() {
                        my_size += ::protobuf::rt::bytes_size(1, &self.utf8_representation);
                    }
                    if self.character_type != ::protobuf::EnumOrUnknown::new(character::CharacterType::CT_REGULAR) {
                        my_size += ::protobuf::rt::int32_size(2, self.character_type.value());
                    }
                    if self.ignore != false {
                        my_size += 1 + 1;
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if !self.utf8_representation.is_empty() {
                        os.write_bytes(1, &self.utf8_representation)?;
                    }
                    if self.character_type != ::protobuf::EnumOrUnknown::new(character::CharacterType::CT_REGULAR) {
                        os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.character_type))?;
                    }
                    if self.ignore != false {
                        os.write_bool(3, self.ignore)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> Character {
                    Character::new()
                }

                fn clear(&mut self) {
                    self.utf8_representation.clear();
                    self.character_type = ::protobuf::EnumOrUnknown::new(character::CharacterType::CT_REGULAR);
                    self.ignore = false;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static Character {
                    static instance: Character = Character {
                        utf8_representation: ::std::vec::Vec::new(),
                        character_type: ::protobuf::EnumOrUnknown::from_i32(0),
                        ignore: false,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for Character {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("ModelFile.Output.OcrOutputFormat.Character").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for Character {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for Character {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }

            /// Nested message and enums of message `Character`
            pub mod character {
                #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
                // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.CharacterType)
                pub enum CharacterType {
                    // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.CharacterType.CT_REGULAR)
                    CT_REGULAR = 0,
                    // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.CharacterType.CT_START_OF_TEXT)
                    CT_START_OF_TEXT = 1,
                    // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.CharacterType.CT_END_OF_TEXT)
                    CT_END_OF_TEXT = 2,
                    // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.Output.OcrOutputFormat.Character.CharacterType.CT_PADDING)
                    CT_PADDING = 3,
                }

                impl ::protobuf::Enum for CharacterType {
                    const NAME: &'static str = "CharacterType";

                    fn value(&self) -> i32 {
                        *self as i32
                    }

                    fn from_i32(value: i32) -> ::std::option::Option<CharacterType> {
                        match value {
                            0 => ::std::option::Option::Some(CharacterType::CT_REGULAR),
                            1 => ::std::option::Option::Some(CharacterType::CT_START_OF_TEXT),
                            2 => ::std::option::Option::Some(CharacterType::CT_END_OF_TEXT),
                            3 => ::std::option::Option::Some(CharacterType::CT_PADDING),
                            _ => ::std::option::Option::None
                        }
                    }

                    fn from_str(str: &str) -> ::std::option::Option<CharacterType> {
                        match str {
                            "CT_REGULAR" => ::std::option::Option::Some(CharacterType::CT_REGULAR),
                            "CT_START_OF_TEXT" => ::std::option::Option::Some(CharacterType::CT_START_OF_TEXT),
                            "CT_END_OF_TEXT" => ::std::option::Option::Some(CharacterType::CT_END_OF_TEXT),
                            "CT_PADDING" => ::std::option::Option::Some(CharacterType::CT_PADDING),
                            _ => ::std::option::Option::None
                        }
                    }

                    const VALUES: &'static [CharacterType] = &[
                        CharacterType::CT_REGULAR,
                        CharacterType::CT_START_OF_TEXT,
                        CharacterType::CT_END_OF_TEXT,
                        CharacterType::CT_PADDING,
                    ];
                }

                impl ::protobuf::EnumFull for CharacterType {
                    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                        descriptor.get(|| super::super::super::super::file_descriptor().enum_by_package_relative_name("ModelFile.Output.OcrOutputFormat.Character.CharacterType").unwrap()).clone()
                    }

                    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                        let index = *self as usize;
                        Self::enum_descriptor().value_by_index(index)
                    }
                }

                impl ::std::default::Default for CharacterType {
                    fn default() -> Self {
                        CharacterType::CT_REGULAR
                    }
                }

                impl CharacterType {
                    pub(in super::super::super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CharacterType>("ModelFile.Output.OcrOutputFormat.Character.CharacterType")
                    }
                }
            }
        }
    }

    // @@protoc_insertion_point(message:modelfile.v2.ModelFile.FileInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FileInfo {
        // message fields
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.file_type)
        pub file_type: ::protobuf::EnumOrUnknown<file_info::FileType>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_name)
        pub network_name: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_id)
        pub network_id: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_experiment_id)
        pub network_experiment_id: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_snapshot_id)
        pub network_snapshot_id: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_type)
        pub network_type: ::protobuf::EnumOrUnknown<file_info::NetworkType>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_flavor)
        pub network_flavor: ::std::string::String,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.network_version)
        pub network_version: ::protobuf::MessageField<Version>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.runtime_version)
        pub runtime_version: ::protobuf::MessageField<Version>,
        // @@protoc_insertion_point(field:modelfile.v2.ModelFile.FileInfo.precision)
        pub precision: ::protobuf::EnumOrUnknown<file_info::Precision>,
        // special fields
        // @@protoc_insertion_point(special_field:modelfile.v2.ModelFile.FileInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FileInfo {
        fn default() -> &'a FileInfo {
            <FileInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl FileInfo {
        pub fn new() -> FileInfo {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(10);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "file_type",
                |m: &FileInfo| { &m.file_type },
                |m: &mut FileInfo| { &mut m.file_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_name",
                |m: &FileInfo| { &m.network_name },
                |m: &mut FileInfo| { &mut m.network_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_id",
                |m: &FileInfo| { &m.network_id },
                |m: &mut FileInfo| { &mut m.network_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_experiment_id",
                |m: &FileInfo| { &m.network_experiment_id },
                |m: &mut FileInfo| { &mut m.network_experiment_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_snapshot_id",
                |m: &FileInfo| { &m.network_snapshot_id },
                |m: &mut FileInfo| { &mut m.network_snapshot_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_type",
                |m: &FileInfo| { &m.network_type },
                |m: &mut FileInfo| { &mut m.network_type },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "network_flavor",
                |m: &FileInfo| { &m.network_flavor },
                |m: &mut FileInfo| { &mut m.network_flavor },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Version>(
                "network_version",
                |m: &FileInfo| { &m.network_version },
                |m: &mut FileInfo| { &mut m.network_version },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Version>(
                "runtime_version",
                |m: &FileInfo| { &m.runtime_version },
                |m: &mut FileInfo| { &mut m.runtime_version },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "precision",
                |m: &FileInfo| { &m.precision },
                |m: &mut FileInfo| { &mut m.precision },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FileInfo>(
                "ModelFile.FileInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for FileInfo {
        const NAME: &'static str = "FileInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.file_type = is.read_enum_or_unknown()?;
                    },
                    18 => {
                        self.network_name = is.read_string()?;
                    },
                    26 => {
                        self.network_id = is.read_string()?;
                    },
                    34 => {
                        self.network_experiment_id = is.read_string()?;
                    },
                    42 => {
                        self.network_snapshot_id = is.read_string()?;
                    },
                    48 => {
                        self.network_type = is.read_enum_or_unknown()?;
                    },
                    58 => {
                        self.network_flavor = is.read_string()?;
                    },
                    66 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.network_version)?;
                    },
                    74 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.runtime_version)?;
                    },
                    80 => {
                        self.precision = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.file_type != ::protobuf::EnumOrUnknown::new(file_info::FileType::FT_ONNX_MODEL) {
                my_size += ::protobuf::rt::int32_size(1, self.file_type.value());
            }
            if !self.network_name.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.network_name);
            }
            if !self.network_id.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.network_id);
            }
            if !self.network_experiment_id.is_empty() {
                my_size += ::protobuf::rt::string_size(4, &self.network_experiment_id);
            }
            if !self.network_snapshot_id.is_empty() {
                my_size += ::protobuf::rt::string_size(5, &self.network_snapshot_id);
            }
            if self.network_type != ::protobuf::EnumOrUnknown::new(file_info::NetworkType::NT_UNKNOWN) {
                my_size += ::protobuf::rt::int32_size(6, self.network_type.value());
            }
            if !self.network_flavor.is_empty() {
                my_size += ::protobuf::rt::string_size(7, &self.network_flavor);
            }
            if let Some(v) = self.network_version.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.runtime_version.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.precision != ::protobuf::EnumOrUnknown::new(file_info::Precision::P_UNDEFINED) {
                my_size += ::protobuf::rt::int32_size(10, self.precision.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.file_type != ::protobuf::EnumOrUnknown::new(file_info::FileType::FT_ONNX_MODEL) {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.file_type))?;
            }
            if !self.network_name.is_empty() {
                os.write_string(2, &self.network_name)?;
            }
            if !self.network_id.is_empty() {
                os.write_string(3, &self.network_id)?;
            }
            if !self.network_experiment_id.is_empty() {
                os.write_string(4, &self.network_experiment_id)?;
            }
            if !self.network_snapshot_id.is_empty() {
                os.write_string(5, &self.network_snapshot_id)?;
            }
            if self.network_type != ::protobuf::EnumOrUnknown::new(file_info::NetworkType::NT_UNKNOWN) {
                os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.network_type))?;
            }
            if !self.network_flavor.is_empty() {
                os.write_string(7, &self.network_flavor)?;
            }
            if let Some(v) = self.network_version.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
            }
            if let Some(v) = self.runtime_version.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            if self.precision != ::protobuf::EnumOrUnknown::new(file_info::Precision::P_UNDEFINED) {
                os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.precision))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FileInfo {
            FileInfo::new()
        }

        fn clear(&mut self) {
            self.file_type = ::protobuf::EnumOrUnknown::new(file_info::FileType::FT_ONNX_MODEL);
            self.network_name.clear();
            self.network_id.clear();
            self.network_experiment_id.clear();
            self.network_snapshot_id.clear();
            self.network_type = ::protobuf::EnumOrUnknown::new(file_info::NetworkType::NT_UNKNOWN);
            self.network_flavor.clear();
            self.network_version.clear();
            self.runtime_version.clear();
            self.precision = ::protobuf::EnumOrUnknown::new(file_info::Precision::P_UNDEFINED);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FileInfo {
            static instance: FileInfo = FileInfo {
                file_type: ::protobuf::EnumOrUnknown::from_i32(0),
                network_name: ::std::string::String::new(),
                network_id: ::std::string::String::new(),
                network_experiment_id: ::std::string::String::new(),
                network_snapshot_id: ::std::string::String::new(),
                network_type: ::protobuf::EnumOrUnknown::from_i32(0),
                network_flavor: ::std::string::String::new(),
                network_version: ::protobuf::MessageField::none(),
                runtime_version: ::protobuf::MessageField::none(),
                precision: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for FileInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ModelFile.FileInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FileInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FileInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `FileInfo`
    pub mod file_info {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.FileInfo.FileType)
        pub enum FileType {
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.FileType.FT_ONNX_MODEL)
            FT_ONNX_MODEL = 0,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.FileType.FT_ZXING_KEY)
            FT_ZXING_KEY = 1,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.FileType.FT_VIZIOTIX_KEY)
            FT_VIZIOTIX_KEY = 2,
        }

        impl ::protobuf::Enum for FileType {
            const NAME: &'static str = "FileType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<FileType> {
                match value {
                    0 => ::std::option::Option::Some(FileType::FT_ONNX_MODEL),
                    1 => ::std::option::Option::Some(FileType::FT_ZXING_KEY),
                    2 => ::std::option::Option::Some(FileType::FT_VIZIOTIX_KEY),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<FileType> {
                match str {
                    "FT_ONNX_MODEL" => ::std::option::Option::Some(FileType::FT_ONNX_MODEL),
                    "FT_ZXING_KEY" => ::std::option::Option::Some(FileType::FT_ZXING_KEY),
                    "FT_VIZIOTIX_KEY" => ::std::option::Option::Some(FileType::FT_VIZIOTIX_KEY),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [FileType] = &[
                FileType::FT_ONNX_MODEL,
                FileType::FT_ZXING_KEY,
                FileType::FT_VIZIOTIX_KEY,
            ];
        }

        impl ::protobuf::EnumFull for FileType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ModelFile.FileInfo.FileType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for FileType {
            fn default() -> Self {
                FileType::FT_ONNX_MODEL
            }
        }

        impl FileType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FileType>("ModelFile.FileInfo.FileType")
            }
        }

        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.FileInfo.NetworkType)
        pub enum NetworkType {
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_UNKNOWN)
            NT_UNKNOWN = 0,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_CLASSIFICATION)
            NT_CLASSIFICATION = 1,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_SEGMENTATION)
            NT_SEGMENTATION = 2,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_INSTANCE_SEGMENTATION)
            NT_INSTANCE_SEGMENTATION = 3,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_OBJECT_DETECTION)
            NT_OBJECT_DETECTION = 4,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_ANOMALY_DETECTION)
            NT_ANOMALY_DETECTION = 5,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.NetworkType.NT_OPTICAL_CHARACTER_RECOGNITION)
            NT_OPTICAL_CHARACTER_RECOGNITION = 6,
        }

        impl ::protobuf::Enum for NetworkType {
            const NAME: &'static str = "NetworkType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<NetworkType> {
                match value {
                    0 => ::std::option::Option::Some(NetworkType::NT_UNKNOWN),
                    1 => ::std::option::Option::Some(NetworkType::NT_CLASSIFICATION),
                    2 => ::std::option::Option::Some(NetworkType::NT_SEGMENTATION),
                    3 => ::std::option::Option::Some(NetworkType::NT_INSTANCE_SEGMENTATION),
                    4 => ::std::option::Option::Some(NetworkType::NT_OBJECT_DETECTION),
                    5 => ::std::option::Option::Some(NetworkType::NT_ANOMALY_DETECTION),
                    6 => ::std::option::Option::Some(NetworkType::NT_OPTICAL_CHARACTER_RECOGNITION),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<NetworkType> {
                match str {
                    "NT_UNKNOWN" => ::std::option::Option::Some(NetworkType::NT_UNKNOWN),
                    "NT_CLASSIFICATION" => ::std::option::Option::Some(NetworkType::NT_CLASSIFICATION),
                    "NT_SEGMENTATION" => ::std::option::Option::Some(NetworkType::NT_SEGMENTATION),
                    "NT_INSTANCE_SEGMENTATION" => ::std::option::Option::Some(NetworkType::NT_INSTANCE_SEGMENTATION),
                    "NT_OBJECT_DETECTION" => ::std::option::Option::Some(NetworkType::NT_OBJECT_DETECTION),
                    "NT_ANOMALY_DETECTION" => ::std::option::Option::Some(NetworkType::NT_ANOMALY_DETECTION),
                    "NT_OPTICAL_CHARACTER_RECOGNITION" => ::std::option::Option::Some(NetworkType::NT_OPTICAL_CHARACTER_RECOGNITION),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [NetworkType] = &[
                NetworkType::NT_UNKNOWN,
                NetworkType::NT_CLASSIFICATION,
                NetworkType::NT_SEGMENTATION,
                NetworkType::NT_INSTANCE_SEGMENTATION,
                NetworkType::NT_OBJECT_DETECTION,
                NetworkType::NT_ANOMALY_DETECTION,
                NetworkType::NT_OPTICAL_CHARACTER_RECOGNITION,
            ];
        }

        impl ::protobuf::EnumFull for NetworkType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ModelFile.FileInfo.NetworkType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for NetworkType {
            fn default() -> Self {
                NetworkType::NT_UNKNOWN
            }
        }

        impl NetworkType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NetworkType>("ModelFile.FileInfo.NetworkType")
            }
        }

        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:modelfile.v2.ModelFile.FileInfo.Precision)
        pub enum Precision {
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_UNDEFINED)
            P_UNDEFINED = 0,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_FP8)
            P_FP8 = 1,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_FP16)
            P_FP16 = 2,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_FP32)
            P_FP32 = 3,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_FP64)
            P_FP64 = 4,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_INT8)
            P_INT8 = 5,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_INT16)
            P_INT16 = 6,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_INT32)
            P_INT32 = 7,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_INT64)
            P_INT64 = 8,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_UINT8)
            P_UINT8 = 9,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_UINT16)
            P_UINT16 = 10,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_UINT32)
            P_UINT32 = 11,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_UINT64)
            P_UINT64 = 12,
            // @@protoc_insertion_point(enum_value:modelfile.v2.ModelFile.FileInfo.Precision.P_MIXED_PRECISION)
            P_MIXED_PRECISION = 13,
        }

        impl ::protobuf::Enum for Precision {
            const NAME: &'static str = "Precision";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Precision> {
                match value {
                    0 => ::std::option::Option::Some(Precision::P_UNDEFINED),
                    1 => ::std::option::Option::Some(Precision::P_FP8),
                    2 => ::std::option::Option::Some(Precision::P_FP16),
                    3 => ::std::option::Option::Some(Precision::P_FP32),
                    4 => ::std::option::Option::Some(Precision::P_FP64),
                    5 => ::std::option::Option::Some(Precision::P_INT8),
                    6 => ::std::option::Option::Some(Precision::P_INT16),
                    7 => ::std::option::Option::Some(Precision::P_INT32),
                    8 => ::std::option::Option::Some(Precision::P_INT64),
                    9 => ::std::option::Option::Some(Precision::P_UINT8),
                    10 => ::std::option::Option::Some(Precision::P_UINT16),
                    11 => ::std::option::Option::Some(Precision::P_UINT32),
                    12 => ::std::option::Option::Some(Precision::P_UINT64),
                    13 => ::std::option::Option::Some(Precision::P_MIXED_PRECISION),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Precision> {
                match str {
                    "P_UNDEFINED" => ::std::option::Option::Some(Precision::P_UNDEFINED),
                    "P_FP8" => ::std::option::Option::Some(Precision::P_FP8),
                    "P_FP16" => ::std::option::Option::Some(Precision::P_FP16),
                    "P_FP32" => ::std::option::Option::Some(Precision::P_FP32),
                    "P_FP64" => ::std::option::Option::Some(Precision::P_FP64),
                    "P_INT8" => ::std::option::Option::Some(Precision::P_INT8),
                    "P_INT16" => ::std::option::Option::Some(Precision::P_INT16),
                    "P_INT32" => ::std::option::Option::Some(Precision::P_INT32),
                    "P_INT64" => ::std::option::Option::Some(Precision::P_INT64),
                    "P_UINT8" => ::std::option::Option::Some(Precision::P_UINT8),
                    "P_UINT16" => ::std::option::Option::Some(Precision::P_UINT16),
                    "P_UINT32" => ::std::option::Option::Some(Precision::P_UINT32),
                    "P_UINT64" => ::std::option::Option::Some(Precision::P_UINT64),
                    "P_MIXED_PRECISION" => ::std::option::Option::Some(Precision::P_MIXED_PRECISION),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Precision] = &[
                Precision::P_UNDEFINED,
                Precision::P_FP8,
                Precision::P_FP16,
                Precision::P_FP32,
                Precision::P_FP64,
                Precision::P_INT8,
                Precision::P_INT16,
                Precision::P_INT32,
                Precision::P_INT64,
                Precision::P_UINT8,
                Precision::P_UINT16,
                Precision::P_UINT32,
                Precision::P_UINT64,
                Precision::P_MIXED_PRECISION,
            ];
        }

        impl ::protobuf::EnumFull for Precision {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("ModelFile.FileInfo.Precision").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Precision {
            fn default() -> Self {
                Precision::P_UNDEFINED
            }
        }

        impl Precision {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Precision>("ModelFile.FileInfo.Precision")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12modelfile-v2.proto\x12\x0cmodelfile.v2\"\x9c(\n\tModelFile\x12J\n\
    \x10protocol_version\x18\x01\x20\x01(\x0b2\x1f.modelfile.v2.ModelFile.Ve\
    rsionR\x0fprotocolVersion\x12\x1d\n\ncreated_at\x18\x02\x20\x01(\x03R\tc\
    reatedAt\x12=\n\tfile_info\x18\x03\x20\x01(\x0b2\x20.modelfile.v2.ModelF\
    ile.FileInfoR\x08fileInfo\x129\n\x07content\x18\x04\x20\x01(\x0b2\x1f.mo\
    delfile.v2.ModelFile.ContentR\x07content\x12E\n\x0cclass_labels\x18\x05\
    \x20\x03(\x0b2\".modelfile.v2.ModelFile.ClassLabelR\x0bclassLabels\x125\
    \n\x06inputs\x18\x06\x20\x03(\x0b2\x1d.modelfile.v2.ModelFile.InputR\x06\
    inputs\x128\n\x07outputs\x18\x07\x20\x03(\x0b2\x1e.modelfile.v2.ModelFil\
    e.OutputR\x07outputs\x122\n\x15int8_calibration_data\x18\x08\x20\x01(\
    \x0cR\x13int8CalibrationData\x1aK\n\x07Version\x12\x14\n\x05major\x18\
    \x01\x20\x01(\rR\x05major\x12\x14\n\x05minor\x18\x02\x20\x01(\rR\x05mino\
    r\x12\x14\n\x05patch\x18\x03\x20\x01(\rR\x05patch\x1a\x9b\x05\n\x07Conte\
    nt\x12!\n\x0cbyte_content\x18\x01\x20\x01(\x0cR\x0bbyteContent\x12\x1f\n\
    \x0bhash_sha256\x18\x02\x20\x01(\x0cR\nhashSha256\x12`\n\x12compression_\
    method\x18\x03\x20\x01(\x0e21.modelfile.v2.ModelFile.Content.Compression\
    MethodR\x11compressionMethod\x12]\n\x11encryption_method\x18\x04\x20\x01\
    (\x0e20.modelfile.v2.ModelFile.Content.EncryptionMethodR\x10encryptionMe\
    thod\x12J\n\tkey_slots\x18\x05\x20\x03(\x0b2-.modelfile.v2.ModelFile.Con\
    tent.KeySlotsEntryR\x08keySlots\x1a\x85\x01\n\x07KeySlot\x12\x1f\n\x0bwr\
    apped_key\x18\x01\x20\x01(\x0cR\nwrappedKey\x12Y\n\x0fwrapping_method\
    \x18\x02\x20\x01(\x0e20.modelfile.v2.ModelFile.Content.EncryptionMethodR\
    \x0ewrappingMethod\x1ad\n\rKeySlotsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12=\n\x05value\x18\x02\x20\x01(\x0b2'.modelfile.v2.Mode\
    lFile.Content.KeySlotR\x05value:\x028\x01\"\x20\n\x11CompressionMethod\
    \x12\x0b\n\x07CM_NONE\x10\0\"/\n\x10EncryptionMethod\x12\x0b\n\x07EM_NON\
    E\x10\0\x12\x0e\n\nEM_AES_GCM\x10\x01\x1a{\n\nClassLabel\x12$\n\x0eclass\
    _label_id\x18\x01\x20\x01(\tR\x0cclassLabelId\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12\x1d\n\nshort_name\x18\x03\x20\x01(\tR\tshortNam\
    e\x12\x14\n\x05color\x18\x04\x20\x01(\tR\x05color\x1aU\n\tImageSize\x12\
    \x14\n\x05width\x18\x01\x20\x01(\rR\x05width\x12\x16\n\x06height\x18\x02\
    \x20\x01(\rR\x06height\x12\x1a\n\x08channels\x18\x03\x20\x01(\rR\x08chan\
    nels\x1ad\n\x0eRegionFromEdge\x12\x12\n\x04left\x18\x01\x20\x01(\x01R\
    \x04left\x12\x14\n\x05right\x18\x02\x20\x01(\x01R\x05right\x12\x10\n\x03\
    top\x18\x03\x20\x01(\x01R\x03top\x12\x16\n\x06bottom\x18\x04\x20\x01(\
    \x01R\x06bottom\x1a\xea\x06\n\x05Input\x12S\n\x0cimage_format\x18\x01\
    \x20\x01(\x0b2..modelfile.v2.ModelFile.Input.ImageInputFormatH\0R\x0bima\
    geFormat\x1a\xf6\x05\n\x10ImageInputFormat\x12t\n\x10exact_image_size\
    \x18\x01\x20\x01(\x0b2H.modelfile.v2.ModelFile.Input.ImageInputFormat.Ex\
    actImageSizeRequirementH\0R\x0eexactImageSize\x12\x80\x01\n\x14divisible\
    _image_size\x18\x02\x20\x01(\x0b2L.modelfile.v2.ModelFile.Input.ImageInp\
    utFormat.DivisibleImageSizeRequirementH\0R\x12divisibleImageSize\x12T\n\
    \x12region_of_interest\x18\x03\x20\x01(\x0b2&.modelfile.v2.ModelFile.Reg\
    ionFromEdgeR\x10regionOfInterest\x1a]\n\x19ExactImageSizeRequirement\x12\
    @\n\nimage_size\x18\x01\x20\x01(\x0b2!.modelfile.v2.ModelFile.ImageSizeR\
    \timageSize\x1a\x98\x02\n\x1dDivisibleImageSizeRequirement\x12Q\n\x13ima\
    ge_size_divisors\x18\x01\x20\x01(\x0b2!.modelfile.v2.ModelFile.ImageSize\
    R\x11imageSizeDivisors\x12O\n\x12minimum_image_size\x18\x02\x20\x01(\x0b\
    2!.modelfile.v2.ModelFile.ImageSizeR\x10minimumImageSize\x12S\n\x14sugge\
    sted_image_size\x18\x03\x20\x01(\x0b2!.modelfile.v2.ModelFile.ImageSizeR\
    \x12suggestedImageSizeB\x19\n\x17image_size_requirementsB\x13\n\x11Forma\
    tInformation\x1a\x82\r\n\x06Output\x12w\n\x18image_classifiers_format\
    \x18\x01\x20\x01(\x0b2;.modelfile.v2.ModelFile.Output.ImageClassifiersOu\
    tputFormatH\0R\x16imageClassifiersFormat\x12w\n\x18segmentation_maps_for\
    mat\x18\x02\x20\x01(\x0b2;.modelfile.v2.ModelFile.Output.SegmentationMap\
    sOutputFormatH\0R\x16segmentationMapsFormat\x12n\n\x15bounding_boxes_for\
    mat\x18\x03\x20\x01(\x0b28.modelfile.v2.ModelFile.Output.BoundingBoxesOu\
    tputFormatH\0R\x13boundingBoxesFormat\x12\x90\x01\n!bounding_box_segment\
    ations_format\x18\x04\x20\x01(\x0b2C.modelfile.v2.ModelFile.Output.Bound\
    ingBoxSegmentationsOutputFormatH\0R\x1eboundingBoxSegmentationsFormat\
    \x12O\n\nocr_format\x18\x05\x20\x01(\x0b2..modelfile.v2.ModelFile.Output\
    .OcrOutputFormatH\0R\tocrFormat\x1a\x1e\n\x1cImageClassifiersOutputForma\
    t\x1a`\n\x1cSegmentationMapsOutputFormat\x12@\n\nimage_size\x18\x01\x20\
    \x01(\x0b2!.modelfile.v2.ModelFile.ImageSizeR\timageSize\x1a\xb5\x02\n\
    \x19BoundingBoxesOutputFormat\x12&\n\x0fnumber_of_boxes\x18\x01\x20\x01(\
    \x04R\rnumberOfBoxes\x12\x16\n\x06stride\x18\x02\x20\x01(\x04R\x06stride\
    \x12\x1b\n\tx1_offset\x18\x03\x20\x01(\x04R\x08x1Offset\x12\x1b\n\ty1_of\
    fset\x18\x04\x20\x01(\x04R\x08y1Offset\x12\x1b\n\tx2_offset\x18\x05\x20\
    \x01(\x04R\x08x2Offset\x12\x1b\n\ty2_offset\x18\x06\x20\x01(\x04R\x08y2O\
    ffset\x12+\n\x11confidence_offset\x18\x07\x20\x01(\x04R\x10confidenceOff\
    set\x127\n\x18class_label_index_offset\x18\x08\x20\x01(\x04R\x15classLab\
    elIndexOffset\x1a\xa1\x01\n$BoundingBoxSegmentationsOutputFormat\x12@\n\
    \nimage_size\x18\x01\x20\x01(\x0b2!.modelfile.v2.ModelFile.ImageSizeR\ti\
    mageSize\x127\n\x18relative_to_bounding_box\x18\x02\x20\x01(\x08R\x15rel\
    ativeToBoundingBox\x1a\xbe\x03\n\x0fOcrOutputFormat\x120\n\x14number_of_\
    characters\x18\x01\x20\x01(\x04R\x12numberOfCharacters\x12X\n\ncharacter\
    s\x18\x02\x20\x03(\x0b28.modelfile.v2.ModelFile.Output.OcrOutputFormat.C\
    haracterR\ncharacters\x1a\x9e\x02\n\tCharacter\x12/\n\x13utf8_representa\
    tion\x18\x01\x20\x01(\x0cR\x12utf8Representation\x12m\n\x0echaracter_typ\
    e\x18\x02\x20\x01(\x0e2F.modelfile.v2.ModelFile.Output.OcrOutputFormat.C\
    haracter.CharacterTypeR\rcharacterType\x12\x16\n\x06ignore\x18\x03\x20\
    \x01(\x08R\x06ignore\"Y\n\rCharacterType\x12\x0e\n\nCT_REGULAR\x10\0\x12\
    \x14\n\x10CT_START_OF_TEXT\x10\x01\x12\x12\n\x0eCT_END_OF_TEXT\x10\x02\
    \x12\x0e\n\nCT_PADDING\x10\x03B\x13\n\x11FormatInformation\x1a\xa6\x08\n\
    \x08FileInfo\x12F\n\tfile_type\x18\x01\x20\x01(\x0e2).modelfile.v2.Model\
    File.FileInfo.FileTypeR\x08fileType\x12!\n\x0cnetwork_name\x18\x02\x20\
    \x01(\tR\x0bnetworkName\x12\x1d\n\nnetwork_id\x18\x03\x20\x01(\tR\tnetwo\
    rkId\x122\n\x15network_experiment_id\x18\x04\x20\x01(\tR\x13networkExper\
    imentId\x12.\n\x13network_snapshot_id\x18\x05\x20\x01(\tR\x11networkSnap\
    shotId\x12O\n\x0cnetwork_type\x18\x06\x20\x01(\x0e2,.modelfile.v2.ModelF\
    ile.FileInfo.NetworkTypeR\x0bnetworkType\x12%\n\x0enetwork_flavor\x18\
    \x07\x20\x01(\tR\rnetworkFlavor\x12H\n\x0fnetwork_version\x18\x08\x20\
    \x01(\x0b2\x1f.modelfile.v2.ModelFile.VersionR\x0enetworkVersion\x12H\n\
    \x0fruntime_version\x18\t\x20\x01(\x0b2\x1f.modelfile.v2.ModelFile.Versi\
    onR\x0eruntimeVersion\x12H\n\tprecision\x18\n\x20\x01(\x0e2*.modelfile.v\
    2.ModelFile.FileInfo.PrecisionR\tprecision\"D\n\x08FileType\x12\x11\n\rF\
    T_ONNX_MODEL\x10\0\x12\x10\n\x0cFT_ZXING_KEY\x10\x01\x12\x13\n\x0fFT_VIZ\
    IOTIX_KEY\x10\x02\"\xc0\x01\n\x0bNetworkType\x12\x0e\n\nNT_UNKNOWN\x10\0\
    \x12\x15\n\x11NT_CLASSIFICATION\x10\x01\x12\x13\n\x0fNT_SEGMENTATION\x10\
    \x02\x12\x1c\n\x18NT_INSTANCE_SEGMENTATION\x10\x03\x12\x17\n\x13NT_OBJEC\
    T_DETECTION\x10\x04\x12\x18\n\x14NT_ANOMALY_DETECTION\x10\x05\x12$\n\x20\
    NT_OPTICAL_CHARACTER_RECOGNITION\x10\x06\"\xcc\x01\n\tPrecision\x12\x0f\
    \n\x0bP_UNDEFINED\x10\0\x12\t\n\x05P_FP8\x10\x01\x12\n\n\x06P_FP16\x10\
    \x02\x12\n\n\x06P_FP32\x10\x03\x12\n\n\x06P_FP64\x10\x04\x12\n\n\x06P_IN\
    T8\x10\x05\x12\x0b\n\x07P_INT16\x10\x06\x12\x0b\n\x07P_INT32\x10\x07\x12\
    \x0b\n\x07P_INT64\x10\x08\x12\x0b\n\x07P_UINT8\x10\t\x12\x0c\n\x08P_UINT\
    16\x10\n\x12\x0c\n\x08P_UINT32\x10\x0b\x12\x0c\n\x08P_UINT64\x10\x0c\x12\
    \x15\n\x11P_MIXED_PRECISION\x10\rB5Z\x19denkproto-go/modelfile/v2\xaa\
    \x02\x17DENK.Proto.Modelfile.V2b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(ModelFile::generated_message_descriptor_data());
            messages.push(model_file::Version::generated_message_descriptor_data());
            messages.push(model_file::Content::generated_message_descriptor_data());
            messages.push(model_file::ClassLabel::generated_message_descriptor_data());
            messages.push(model_file::ImageSize::generated_message_descriptor_data());
            messages.push(model_file::RegionFromEdge::generated_message_descriptor_data());
            messages.push(model_file::Input::generated_message_descriptor_data());
            messages.push(model_file::Output::generated_message_descriptor_data());
            messages.push(model_file::FileInfo::generated_message_descriptor_data());
            messages.push(model_file::content::KeySlot::generated_message_descriptor_data());
            messages.push(model_file::input::ImageInputFormat::generated_message_descriptor_data());
            messages.push(model_file::input::image_input_format::ExactImageSizeRequirement::generated_message_descriptor_data());
            messages.push(model_file::input::image_input_format::DivisibleImageSizeRequirement::generated_message_descriptor_data());
            messages.push(model_file::output::ImageClassifiersOutputFormat::generated_message_descriptor_data());
            messages.push(model_file::output::SegmentationMapsOutputFormat::generated_message_descriptor_data());
            messages.push(model_file::output::BoundingBoxesOutputFormat::generated_message_descriptor_data());
            messages.push(model_file::output::BoundingBoxSegmentationsOutputFormat::generated_message_descriptor_data());
            messages.push(model_file::output::OcrOutputFormat::generated_message_descriptor_data());
            messages.push(model_file::output::ocr_output_format::Character::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(model_file::content::CompressionMethod::generated_enum_descriptor_data());
            enums.push(model_file::content::EncryptionMethod::generated_enum_descriptor_data());
            enums.push(model_file::output::ocr_output_format::character::CharacterType::generated_enum_descriptor_data());
            enums.push(model_file::file_info::FileType::generated_enum_descriptor_data());
            enums.push(model_file::file_info::NetworkType::generated_enum_descriptor_data());
            enums.push(model_file::file_info::Precision::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
